# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/cancer_dataloading.ipynb.

# %% auto 0
__all__ = ['colab_train_dir', 'colab_test_dir', 'local_train_dir', 'local_test_dir', 'melanoma_names_train',
           'actinickeratosis_names_valid', 'basalcellcarcinoma_names_test', 'BYOL_Augs', 'TUNE_Augs', 'Val_Augs',
           'get_file_lists', 'extract_text', 'label_func', 'get_difference', 'test_extract_text', 'test_label_func',
           'get_fnames_dict', 'get_data_dict', 'get_fnames_dls_dict', 'save_dict_to_gdrive', 'load_dict_from_gdrive',
           'tensor_to_np', 'seed_everything', 'test_fnames', 'test_data', 'test_dls_data', 'get_resnet_encoder',
           'create_model', 'create_aug_pipelines']

# %% ../nbs/cancer_dataloading.ipynb 5
import fastai
from fastai.vision.all import *
from base_rbt.base_model import * #probably don't need this whole thing...
from base_rbt.base_linear import show_linear_batch

# %% ../nbs/cancer_dataloading.ipynb 6
#colab
colab_train_dir='skin_cancer_ISIC/Train'
colab_test_dir='skin_cancer_ISIC/Test'

# %% ../nbs/cancer_dataloading.ipynb 7
#local
local_train_dir='/Users/hamishhaggerty/Downloads/skin_cancer_ISIC/Train'
local_test_dir='/Users/hamishhaggerty/Downloads/skin_cancer_ISIC/Test'

# %% ../nbs/cancer_dataloading.ipynb 9
#Seems all we need here is class_names?

def get_file_lists(train_dir):

    #train
    class_names0 = os.listdir(train_dir)
    class_names = sorted(class_names0)
    num_class = len(class_names)
    image_files = [[os.path.join(train_dir, class_name, x) 
                for x in os.listdir(os.path.join(train_dir, class_name))] 
                for class_name in class_names]

    image_file_list = []
    image_label_list = []
    for i, class_name in enumerate(class_names):
        image_file_list.extend(image_files[i])
        image_label_list.extend([i] * len(image_files[i]))
    num_total = len(image_label_list)

    return {'image_file_list':image_file_list, 'image_label_list':image_label_list, 'num_total':num_total, 'num_class':num_class, 'class_names':class_names}


# %% ../nbs/cancer_dataloading.ipynb 10
#Helper functions to extract class names from the filenames
import re
def extract_text(string):
    # Use the compile method to create a RegexObject
    pattern = re.compile(r'/Train/(.*?)/ISIC')

    # Use the search method of the RegexObject to find the pattern in the string
    match = pattern.search(string)

    # If a match is found, return the matched text
    if match:
        return match.group(1)
    # If no match is found, return None
    else:
        
        return None

def label_func(x): return extract_text(x.as_posix())

def get_difference(x1, x2):
    return list(set(x1) - set(x2))


# %% ../nbs/cancer_dataloading.ipynb 11
def test_extract_text(string):
    # Use the compile method to create a RegexObject
    pattern = re.compile(r'/new_Test/(.*?)/ISIC')

    # Use the search method of the RegexObject to find the pattern in the string
    match = pattern.search(string)

    # If a match is found, return the matched text
    if match:
        return match.group(1)
    # If no match is found, return None
    else:
        
        return None

def test_label_func(x): return test_extract_text(x.as_posix())

# %% ../nbs/cancer_dataloading.ipynb 12
def get_fnames_dict(train_dir,test_dir,class_names,on_colab=False):
    "get dictionary of fnames"

    #training files names / paths
    fnames = get_image_files(train_dir)
    fnames.sort()
    
    #Extract 'new' training set from this directory. We want at most 
    #100 samples per class (some categories have less than that anyway)
    max_num =100 #maximum number of samples in each class
    count_dict = {i:0 for i in class_names}
    fnames_train = []
    for i in fnames:
        #st=extract_text(i.as_posix())
        st=label_func(i)
        
        if count_dict[st]<max_num: #no more than 100 samples per category
            fnames_train.append(i)
            count_dict[st]+=1
                    
    #We further partition fnames_train into a tune-valiation set. 
    count_dict2 = {i:0 for i in class_names}
    fnames_tune = []
    for i in fnames_train:
        st = label_func(i)
        if count_dict2[st] < 0.8*count_dict[st]:
            fnames_tune.append(i)
            count_dict2[st]+=1
    
    
    fnames_tune.sort()
    fnames_valid = get_difference(fnames_train,fnames_tune)
    fnames_valid.sort()

    #new test set: original test test, plus everything in original fnames (training set)
    #that is NOT in the new training set.
    fnames_test = get_difference(fnames,fnames_train) + get_image_files(test_dir)
    fnames_test.sort()
    
    #now we can just set fnames_train to be fnames_tune. We use fnames_tune 
    #for fine tuning but also pretraining
    fnames_train = fnames_tune
    
    #make sure that fnames_test is disjoint from stuff used for training
    for name in fnames_test:
        test_eq(name not in fnames_train,True)
        test_eq(name not in fnames_valid,True)
        test_eq(name not in fnames_tune,True)


    #variables just used for debugging/testing: when we reconstruct fnames_test below
    #make sure size etc hasn't changed
    N = len(fnames_test)
    fnames_test_num = [i.as_posix().split('/')[-1] for i in fnames_test]
    
    if on_colab:
        new_test_dir = '/skin_cancer_ISIC/new_Test'

    else:

        new_test_dir = '/Users/hamishhaggerty/Downloads/skin_cancer_ISIC/new_Test'

    os.makedirs(new_test_dir, exist_ok=True)

    for f in fnames_test:
        if str(f).startswith(str(test_dir)):
            dst = os.path.join(new_test_dir, f.relative_to(test_dir))
        elif str(f).startswith(str(train_dir)):
            dst = os.path.join(new_test_dir, f.relative_to(train_dir))
        else:
            continue
        os.makedirs(os.path.dirname(dst), exist_ok=True)
        shutil.copy2(f, dst)

    fnames_test = get_image_files(new_test_dir)
    
    fnames_test.sort()
    
    #make sure fnames_test has the same data as before: we have just put it into 
    #a different directory
    test_eq(N,len(fnames_test)) #N is length of fnames_test before putting data in new directory
    
    test_eq(len(fnames_test),len(set(fnames_test)))
    
    test_eq(set(fnames_test_num),set([i.as_posix().split('/')[-1] for i in fnames_test]))
    
    
    
    return {'fnames':fnames,'fnames_train':fnames_train,'fnames_tune':fnames_tune,
            'fnames_valid':fnames_valid,
            'fnames_test':fnames_test,
            'new_test_dir':new_test_dir,
            
            
            }


# %% ../nbs/cancer_dataloading.ipynb 13
import os
import shutil


def get_data_dict(fnames_dict,train_dir,test_dir, #basic stuff needed
                  device,bs_val,bs=256,bs_tune=256,bs_test=297,size=128,n_in=3, #hyperparameters
                  on_colab=False,
                 ):
        "get dictionary of data"

        #fnames = fnames_dict['fnames']
        fnames_train = fnames_dict['fnames_train']
        fnames_tune = fnames_dict['fnames_tune']
        fnames_valid = fnames_dict['fnames_valid']
        fnames_test = fnames_dict['fnames_test']
        
        
        new_test_dir = fnames_dict['new_test_dir']
        
        
        item_tfms = [Resize(size)]

        dls_train  = ImageDataLoaders.from_path_func(train_dir, fnames_train, label_func,
                                        bs=bs,
                                        item_tfms=item_tfms,
                                        valid_pct=0,
                                        device=device,
                                        num_workers=12*(device=='cuda')
                                        )
        x,y = dls_train.one_batch()

        dls_tune = ImageDataLoaders.from_path_func(train_dir, fnames_tune, label_func,
                                        bs=bs_tune,
                                        item_tfms=item_tfms,
                                        valid_pct=0,
                                        device=device,
                                        shuffle=True,
                                        num_workers=12*(device=='cuda'),
                                        )
        xtune,ytune = dls_tune.one_batch()

        dls_valid  = ImageDataLoaders.from_path_func(train_dir, fnames_valid, label_func,
                                        bs=bs_val,
                                        item_tfms=item_tfms,
                                        valid_pct=0,
                                        num_workers=12*(device=='cuda')
                                        )

        dls_test  = ImageDataLoaders.from_path_func(new_test_dir, fnames_test, test_label_func,
                                bs=1,
                                item_tfms=item_tfms,
                                valid_pct=0,
                                num_workers=12*(device=='cuda')
                                )
        
        xval,yval = dls_valid.one_batch()

        vocab = dls_valid.vocab

        #return the dls etc
        return {'dls_train':dls_train,'dls_tune':dls_tune,'dls_valid':dls_valid,
                'x':x,'y':y,'xval':xval,'yval':yval,'xtune':xtune,'ytune':ytune,
                'vocab':vocab,
                'dls_test':dls_test
                }


# %% ../nbs/cancer_dataloading.ipynb 15
def get_fnames_dls_dict(train_dir,test_dir,
                        device,on_colab=False,bs_val=174,bs=256,bs_tune=256,bs_test=297,size=128,n_in=3,
                        ):

    "Wrapper that returns a dictionary with the fnames, dls etc"

    #do stuff

    class_names = get_file_lists(train_dir)['class_names']
    
    fnames_dict = get_fnames_dict(train_dir,test_dir,class_names,on_colab=on_colab)

    data_dict = get_data_dict(fnames_dict,train_dir,test_dir, #basic stuff needed
                  device=device,bs_val=bs_val,bs=bs,bs_tune=bs_tune,bs_test=bs_test,size=size,n_in=n_in #hyperparameters
                 )

    d = {**fnames_dict,**data_dict}
    
    return d


# %% ../nbs/cancer_dataloading.ipynb 16
import pickle

def save_dict_to_gdrive(d,directory, filename):
    #e.g. directory='/content/drive/My Drive/random_initial_weights'
    filepath = directory + '/' + filename + '.pkl'
    with open(filepath, "wb") as f:
        pickle.dump(d, f)

def load_dict_from_gdrive(directory,filename):
    #e.g. directory='/content/drive/My Drive/random_initial_weights'
    filepath = directory + '/' + filename + '.pkl'
    with open(filepath, "rb") as f:
        d = pickle.load(f)
    return d

# %% ../nbs/cancer_dataloading.ipynb 17
import numpy as np

def tensor_to_np(tensor_image):
    return tensor_image.cpu().numpy()

# %% ../nbs/cancer_dataloading.ipynb 18
def seed_everything(TORCH_SEED):
    random.seed(TORCH_SEED)
    os.environ['PYTHONHASHSEED'] = str(TORCH_SEED)
    np.random.seed(TORCH_SEED)
    torch.manual_seed(TORCH_SEED)
    torch.cuda.manual_seed_all(TORCH_SEED)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False

# %% ../nbs/cancer_dataloading.ipynb 23
#So we can check that e.g. loading on colab will give the same results

def test_fnames(_fnames):
    melanoma_names=[]
    basalcellcarcinoma_names=[]
    actinickeratosis_names=[]
    basalcellcarcinoma_names

    for i in _fnames:

        if 'melanoma' in i.as_posix(): melanoma_names.append(i.as_posix().split('/')[-1])

        if 'basal cell carcinoma' in i.as_posix(): basalcellcarcinoma_names.append(i.as_posix().split('/')[-1])

        if 'actinic keratosis' in i.as_posix(): actinickeratosis_names.append(i.as_posix().split('/')[-1])
    
    return melanoma_names,basalcellcarcinoma_names,actinickeratosis_names


# %% ../nbs/cancer_dataloading.ipynb 24
melanoma_names_train=['ISIC_0000139.jpg','ISIC_0000141.jpg','ISIC_0000142.jpg','ISIC_0000143.jpg','ISIC_0000144.jpg','ISIC_0000145.jpg','ISIC_0000146.jpg','ISIC_0000147.jpg','ISIC_0000148.jpg','ISIC_0000149.jpg','ISIC_0000150.jpg','ISIC_0000151.jpg','ISIC_0000152.jpg','ISIC_0000153.jpg','ISIC_0000154.jpg','ISIC_0000155.jpg','ISIC_0000156.jpg','ISIC_0000157.jpg','ISIC_0000158.jpg','ISIC_0000159.jpg','ISIC_0000160.jpg','ISIC_0000161.jpg','ISIC_0000162.jpg','ISIC_0000163.jpg','ISIC_0000164.jpg','ISIC_0000165.jpg','ISIC_0000166.jpg','ISIC_0000167.jpg','ISIC_0000168.jpg','ISIC_0000169.jpg','ISIC_0000170.jpg','ISIC_0000171.jpg','ISIC_0000172.jpg','ISIC_0000173.jpg','ISIC_0000174.jpg','ISIC_0000175.jpg','ISIC_0000176.jpg','ISIC_0000278.jpg','ISIC_0000279.jpg','ISIC_0000280.jpg','ISIC_0000285.jpg','ISIC_0000288.jpg','ISIC_0000289.jpg','ISIC_0000291.jpg','ISIC_0000292.jpg','ISIC_0000293.jpg','ISIC_0000294.jpg','ISIC_0000295.jpg','ISIC_0000296.jpg','ISIC_0000297.jpg','ISIC_0000298.jpg','ISIC_0000299.jpg','ISIC_0000300.jpg','ISIC_0000301.jpg','ISIC_0000302.jpg','ISIC_0000303.jpg','ISIC_0000304.jpg','ISIC_0000305.jpg','ISIC_0000306.jpg','ISIC_0000307.jpg','ISIC_0000308.jpg','ISIC_0000309.jpg','ISIC_0000310.jpg','ISIC_0000311.jpg','ISIC_0000312.jpg','ISIC_0000313.jpg','ISIC_0000314.jpg','ISIC_0000390.jpg','ISIC_0000393.jpg','ISIC_0000394.jpg','ISIC_0000395.jpg','ISIC_0000398.jpg','ISIC_0000399.jpg','ISIC_0000400.jpg','ISIC_0000401.jpg','ISIC_0000402.jpg','ISIC_0000404.jpg','ISIC_0000405.jpg','ISIC_0000406.jpg','ISIC_0000410.jpg']

# %% ../nbs/cancer_dataloading.ipynb 25
actinickeratosis_names_valid=['ISIC_0030491.jpg','ISIC_0030586.jpg','ISIC_0030655.jpg','ISIC_0030730.jpg','ISIC_0030825.jpg','ISIC_0030826.jpg','ISIC_0030877.jpg','ISIC_0031040.jpg','ISIC_0031108.jpg','ISIC_0031228.jpg','ISIC_0031292.jpg','ISIC_0031335.jpg','ISIC_0031381.jpg','ISIC_0031430.jpg','ISIC_0031506.jpg','ISIC_0031609.jpg','ISIC_0031823.jpg','ISIC_0031922.jpg','ISIC_0031993.jpg','ISIC_0032135.jpg']

# %% ../nbs/cancer_dataloading.ipynb 26
basalcellcarcinoma_names_test = ['ISIC_0024331.jpg','ISIC_0024332.jpg','ISIC_0024345.jpg','ISIC_0024360.jpg','ISIC_0024403.jpg','ISIC_0024411.jpg','ISIC_0024431.jpg','ISIC_0024432.jpg','ISIC_0024436.jpg','ISIC_0024443.jpg','ISIC_0024448.jpg','ISIC_0024452.jpg','ISIC_0024454.jpg','ISIC_0024457.jpg','ISIC_0024461.jpg','ISIC_0024472.jpg','ISIC_0026829.jpg','ISIC_0026831.jpg','ISIC_0026845.jpg','ISIC_0026855.jpg','ISIC_0026865.jpg','ISIC_0026902.jpg','ISIC_0026940.jpg','ISIC_0026952.jpg','ISIC_0026968.jpg','ISIC_0026970.jpg','ISIC_0026978.jpg','ISIC_0026988.jpg','ISIC_0026995.jpg','ISIC_0027004.jpg','ISIC_0027038.jpg','ISIC_0027046.jpg','ISIC_0027057.jpg','ISIC_0027058.jpg','ISIC_0027090.jpg','ISIC_0027093.jpg','ISIC_0027117.jpg','ISIC_0027120.jpg','ISIC_0027135.jpg','ISIC_0027146.jpg','ISIC_0027175.jpg','ISIC_0027189.jpg','ISIC_0027229.jpg','ISIC_0027281.jpg','ISIC_0027291.jpg','ISIC_0027297.jpg','ISIC_0027337.jpg','ISIC_0027371.jpg','ISIC_0027425.jpg','ISIC_0027433.jpg','ISIC_0027473.jpg','ISIC_0027478.jpg','ISIC_0027525.jpg','ISIC_0027526.jpg','ISIC_0027531.jpg','ISIC_0027544.jpg','ISIC_0027545.jpg','ISIC_0027546.jpg','ISIC_0027595.jpg','ISIC_0027601.jpg','ISIC_0027609.jpg','ISIC_0027629.jpg','ISIC_0027631.jpg', 'ISIC_0027675.jpg','ISIC_0027677.jpg','ISIC_0027704.jpg','ISIC_0027722.jpg','ISIC_0027744.jpg','ISIC_0027759.jpg','ISIC_0027774.jpg','ISIC_0027786.jpg','ISIC_0027788.jpg','ISIC_0027814.jpg','ISIC_0027819.jpg','ISIC_0027825.jpg','ISIC_0027846.jpg','ISIC_0027851.jpg','ISIC_0027858.jpg','ISIC_0027865.jpg','ISIC_0027915.jpg','ISIC_0027920.jpg','ISIC_0027966.jpg','ISIC_0027976.jpg','ISIC_0027998.jpg','ISIC_0028035.jpg','ISIC_0028050.jpg','ISIC_0028059.jpg','ISIC_0028079.jpg','ISIC_0028084.jpg','ISIC_0028085.jpg','ISIC_0028095.jpg','ISIC_0028106.jpg','ISIC_0028107.jpg','ISIC_0028113.jpg','ISIC_0028122.jpg','ISIC_0028147.jpg','ISIC_0028155.jpg','ISIC_0028168.jpg','ISIC_0028197.jpg','ISIC_0028238.jpg','ISIC_0028283.jpg','ISIC_0028303.jpg','ISIC_0028316.jpg','ISIC_0028323.jpg','ISIC_0028329.jpg','ISIC_0028350.jpg','ISIC_0028419.jpg','ISIC_0028457.jpg','ISIC_0028486.jpg','ISIC_0028495.jpg','ISIC_0028542.jpg','ISIC_0028556.jpg','ISIC_0028568.jpg','ISIC_0028570.jpg','ISIC_0028577.jpg','ISIC_0028583.jpg','ISIC_0028652.jpg','ISIC_0028653.jpg','ISIC_0028670.jpg','ISIC_0028671.jpg','ISIC_0028677.jpg','ISIC_0028687.jpg','ISIC_0028688.jpg','ISIC_0028693.jpg','ISIC_0028719.jpg','ISIC_0028728.jpg','ISIC_0028739.jpg','ISIC_0028747.jpg','ISIC_0028765.jpg','ISIC_0028807.jpg','ISIC_0028814.jpg','ISIC_0028815.jpg','ISIC_0028818.jpg','ISIC_0028858.jpg','ISIC_0028871.jpg','ISIC_0028877.jpg','ISIC_0028890.jpg','ISIC_0028928.jpg','ISIC_0028937.jpg','ISIC_0028964.jpg','ISIC_0028973.jpg','ISIC_0028978.jpg','ISIC_0028980.jpg','ISIC_0028989.jpg','ISIC_0028994.jpg','ISIC_0029020.jpg','ISIC_0029034.jpg','ISIC_0029035.jpg','ISIC_0029053.jpg','ISIC_0029082.jpg','ISIC_0029083.jpg','ISIC_0029123.jpg','ISIC_0029129.jpg','ISIC_0029192.jpg','ISIC_0029193.jpg','ISIC_0029201.jpg','ISIC_0029220.jpg','ISIC_0029230.jpg','ISIC_0029263.jpg','ISIC_0029278.jpg','ISIC_0029323.jpg','ISIC_0029331.jpg','ISIC_0029337.jpg','ISIC_0029341.jpg','ISIC_0029342.jpg','ISIC_0029352.jpg','ISIC_0029372.jpg','ISIC_0029391.jpg','ISIC_0029392.jpg','ISIC_0029412.jpg','ISIC_0029466.jpg','ISIC_0029489.jpg','ISIC_0029501.jpg','ISIC_0029515.jpg','ISIC_0029524.jpg','ISIC_0029539.jpg','ISIC_0029545.jpg','ISIC_0029546.jpg','ISIC_0029564.jpg','ISIC_0029602.jpg','ISIC_0029644.jpg','ISIC_0029647.jpg','ISIC_0029655.jpg','ISIC_0029669.jpg','ISIC_0029680.jpg','ISIC_0029745.jpg','ISIC_0029747.jpg','ISIC_0029755.jpg','ISIC_0029779.jpg','ISIC_0029805.jpg','ISIC_0029820.jpg','ISIC_0029831.jpg','ISIC_0029847.jpg','ISIC_0029856.jpg','ISIC_0029857.jpg','ISIC_0029899.jpg','ISIC_0029917.jpg','ISIC_0029919.jpg','ISIC_0029951.jpg','ISIC_0029974.jpg','ISIC_0030010.jpg','ISIC_0030094.jpg','ISIC_0030096.jpg','ISIC_0030114.jpg','ISIC_0030138.jpg','ISIC_0030145.jpg','ISIC_0030177.jpg','ISIC_0030181.jpg','ISIC_0030197.jpg','ISIC_0030230.jpg','ISIC_0030233.jpg','ISIC_0030249.jpg','ISIC_0030261.jpg','ISIC_0030271.jpg','ISIC_0030314.jpg','ISIC_0030335.jpg','ISIC_0030339.jpg','ISIC_0030349.jpg','ISIC_0030352.jpg','ISIC_0030403.jpg','ISIC_0030452.jpg','ISIC_0030511.jpg','ISIC_0030514.jpg','ISIC_0030526.jpg','ISIC_0030528.jpg','ISIC_0030574.jpg','ISIC_0030594.jpg','ISIC_0030644.jpg','ISIC_0030659.jpg','ISIC_0030690.jpg','ISIC_0030712.jpg','ISIC_0030737.jpg','ISIC_0030746.jpg','ISIC_0030755.jpg','ISIC_0030766.jpg','ISIC_0030767.jpg','ISIC_0030778.jpg','ISIC_0030782.jpg','ISIC_0030800.jpg','ISIC_0030813.jpg','ISIC_0030868.jpg','ISIC_0030893.jpg','ISIC_0030915.jpg','ISIC_0030954.jpg','ISIC_0030964.jpg','ISIC_0031007.jpg','ISIC_0031009.jpg','ISIC_0031026.jpg','ISIC_0031041.jpg','ISIC_0031056.jpg','ISIC_0031057.jpg','ISIC_0031062.jpg','ISIC_0031063.jpg','ISIC_0031095.jpg','ISIC_0031122.jpg','ISIC_0031140.jpg','ISIC_0031154.jpg','ISIC_0031166.jpg','ISIC_0031169.jpg','ISIC_0031171.jpg','ISIC_0031175.jpg','ISIC_0031225.jpg','ISIC_0031236.jpg','ISIC_0031243.jpg','ISIC_0031245.jpg','ISIC_0031258.jpg','ISIC_0031266.jpg','ISIC_0031272.jpg','ISIC_0031284.jpg','ISIC_0031294.jpg','ISIC_0031298.jpg','ISIC_0031318.jpg','ISIC_0031351.jpg','ISIC_0031378.jpg','ISIC_0031384.jpg','ISIC_0031400.jpg','ISIC_0031407.jpg','ISIC_0031413.jpg','ISIC_0031442.jpg','ISIC_0031450.jpg','ISIC_0031470.jpg','ISIC_0031489.jpg','ISIC_0031513.jpg','ISIC_0031520.jpg','ISIC_0031526.jpg','ISIC_0031531.jpg','ISIC_0031539.jpg','ISIC_0031552.jpg','ISIC_0031569.jpg','ISIC_0031585.jpg','ISIC_0031597.jpg','ISIC_0031614.jpg']

# %% ../nbs/cancer_dataloading.ipynb 28
def test_data(fnames_train,fnames_valid,fnames_test):

    _melanoma_names_train,_basalcellcarcinoma_names_train,_actinickeratosis_names_train = test_fnames(fnames_train)
    _melanoma_names_valid,_basalcellcarcinoma_names_valid,_actinickeratosis_names_valid = test_fnames(fnames_valid)
    _melanoma_names_test,_basalcellcarcinoma_names_test,_actinickeratosis_names_test = test_fnames(fnames_test)

    test_eq(melanoma_names_train,_melanoma_names_train)
    test_eq(actinickeratosis_names_valid,_actinickeratosis_names_valid)
    test_eq(basalcellcarcinoma_names_test,_basalcellcarcinoma_names_test)

    test_eq(melanoma_names_train[0],'ISIC_0000139.jpg')
    test_eq(_basalcellcarcinoma_names_valid[5],'ISIC_0026439.jpg')
    test_eq(actinickeratosis_names_valid[-1],'ISIC_0032135.jpg')
    test_eq(_basalcellcarcinoma_names_test[5],'ISIC_0024411.jpg')

    #Now test disjointness of train and test:
    _basalcellcarcinoma_names = _basalcellcarcinoma_names_train + _basalcellcarcinoma_names_valid

    for name in _basalcellcarcinoma_names:
        test_eq(name not in _basalcellcarcinoma_names_test,True)

    #this is redundant, but just being careful
    for name in _basalcellcarcinoma_names_test:
        test_eq(name not in _basalcellcarcinoma_names,True)

    
     

# %% ../nbs/cancer_dataloading.ipynb 29
def test_dls_data(train_dir,test_dir,device):
    
    _data_dict = get_fnames_dls_dict(train_dir=train_dir,test_dir=test_dir,
                    device=device,bs_val=1,bs=1,bs_tune=1,bs_test=1,
                                size=128,n_in=3
                               )

    _dls_test = _data_dict['dls_test']

    test_eq(len(_dls_test.train),1485)

# %% ../nbs/cancer_dataloading.ipynb 32
def get_resnet_encoder(model,n_in=3):
    model = create_body(model, n_in=n_in, pretrained=False, cut=len(list(model.children()))-1)
    model.add_module('flatten', torch.nn.Flatten())
    return model


def create_model(which_model,device,ps=8192,n_in=3):

    #pretrained=True if 'which_model' in ['bt_pretrain', 'supervised_pretrain'] else False

    if which_model == 'bt_pretrain': model = torch.hub.load('facebookresearch/barlowtwins:main', 'resnet50')
    
    elif which_model == 'no_pretrain': model = resnet50()

    elif which_model == 'supervised_pretrain': model = resnet50(weights='IMAGENET1K_V2')

    #ignore the 'pretrained=False' argument here. Just means we use the weights above 
    #(which themselves are either pretrained or not)
    encoder = get_resnet_encoder(model)

    model = create_barlow_twins_model(encoder, hidden_size=ps,projection_size=ps,nlayers=3)

    if device == 'cuda':
        model.cuda()
        encoder.cuda()


    return model,encoder

# %% ../nbs/cancer_dataloading.ipynb 34
BYOL_Augs = dict(flip_p1=0.5,flip_p2=0.5,jitter_p1=0.8,jitter_p2=0.8,bw_p1=0.2,
                bw_p2=0.2,blur_p1=1.0,blur_p2=0.1,sol_p1=0.0,sol_p2=0.2,noise_p1=0.0,
                noise_p2=0.0,resize_scale=(0.7, 1.0),resize_ratio=(3/4, 4/3),rotate_deg=45.0,
                rotate_p=0.5,blur_r=(0.1,2),blur_s=13,sol_t=0.1,sol_a=0.1,noise_std=0.1 
                )


TUNE_Augs=dict(blur_r = BYOL_Augs['blur_r'],blur_s = BYOL_Augs['blur_s'], flip_p=0.25,
                rotate_p=0.25,jitter_p=0.0,bw_p=0.0,blur_p=0.0,resize_scale=(0.7, 1.0),
                resize_ratio=(3/4, 4/3),rotate_deg=45.0
                )

Val_Augs = dict(TUNE_Augs)


def create_aug_pipelines(size,device,Augs=BYOL_Augs,TUNE_Augs=TUNE_Augs,Val_Augs=Val_Augs):
    "Create the BT pipelines, the tune and val pipelines"

    aug_dict = {}

    aug_pipelines_1 = get_barlow_twins_aug_pipelines(size=size,
                        rotate=True,jitter=True,noise=True,bw=True,blur=True,solar=True, #Whether to use aug or not
                        resize_scale=Augs['resize_scale'],resize_ratio=Augs['resize_ratio'],
                        noise_std=Augs['noise_std'], rotate_deg=Augs['rotate_deg'],
                        blur_r=Augs['blur_r'],blur_s=Augs['blur_s'],sol_t=Augs['sol_t'],sol_a=Augs['sol_a'],
                        flip_p=Augs['flip_p1'], rotate_p=Augs['rotate_p'],noise_p=Augs['noise_p1'],
                        jitter_p=Augs['jitter_p1'], bw_p=Augs['bw_p1'], blur_p=Augs['blur_p1'],
                        sol_p=Augs['sol_p1'], #prob of performing aug
                        same_on_batch=False,stats=None, cuda=(device=='cuda'))

    aug_pipelines_2 = get_barlow_twins_aug_pipelines(size=size,
                        rotate=True,jitter=True,noise=True,bw=True,blur=True,solar=True, #Whether to use aug or not
                        resize_scale=Augs['resize_scale'],resize_ratio=Augs['resize_ratio'],
                        noise_std=Augs['noise_std'], rotate_deg=Augs['rotate_deg'],
                        blur_r=Augs['blur_r'],blur_s=Augs['blur_s'],sol_t=Augs['sol_t'],sol_a=Augs['sol_a'],
                        flip_p=Augs['flip_p2'], rotate_p=Augs['rotate_p'],noise_p=Augs['noise_p2'],
                        jitter_p=Augs['jitter_p2'], bw_p=Augs['bw_p2'], blur_p=Augs['blur_p2'],
                        sol_p=Augs['sol_p2'], #prob of performing aug
                        same_on_batch=False,stats=None, cuda=(device=='cuda'))

    aug_pipelines = [aug_pipelines_1,aug_pipelines_2]


    aug_pipelines_tune =  [get_barlow_twins_aug_pipelines(size=size,
                    rotate=True,jitter=True,noise=False,bw=True,blur=True,solar=False, #Whether to use aug or not
                    resize_scale=TUNE_Augs['resize_scale'],resize_ratio=TUNE_Augs['resize_ratio'],noise_std=None,
                    blur_r=TUNE_Augs['blur_r'],blur_s=TUNE_Augs['blur_s'], rotate_deg=TUNE_Augs['rotate_deg'],
                    sol_t=None,sol_a=None, #hps of augs
                    flip_p=TUNE_Augs['flip_p'], rotate_p=TUNE_Augs['rotate_p'],noise_p=0.0, jitter_p=TUNE_Augs['jitter_p'],
                    bw_p=TUNE_Augs['bw_p'], blur_p=TUNE_Augs['blur_p'],sol_p=0.0, #prob of performing aug
                    same_on_batch=False,stats=None, cuda=(device=='cuda'))]#,P=0.0)




    aug_pipelines_test =  [get_barlow_twins_aug_pipelines(size=size,
                    rotate=True,jitter=True,noise=False,bw=True,blur=True,solar=False, #Whether to use aug or not
                    resize_scale=Val_Augs['resize_scale'],resize_ratio=Val_Augs['resize_ratio'],noise_std=None,
                    blur_r=Val_Augs['blur_r'],blur_s=Val_Augs['blur_s'], rotate_deg=Val_Augs['rotate_deg'],
                    sol_t=None,sol_a=None, #hps of augs
                    flip_p=Val_Augs['flip_p'], rotate_p=Val_Augs['rotate_p'],noise_p=0.0, jitter_p=Val_Augs['jitter_p'],
                    bw_p=Val_Augs['bw_p'], blur_p=Val_Augs['blur_p'],sol_p=0.0, #prob of performing aug
                    same_on_batch=False,stats=None, cuda=(device=='cuda'))]#,P=0.0)

    aug_dict['aug_pipelines'] = aug_pipelines
    aug_dict['aug_pipelines_tune'] = aug_pipelines_tune
    aug_dict['aug_pipelines_test'] = aug_pipelines_test

    return aug_dict


